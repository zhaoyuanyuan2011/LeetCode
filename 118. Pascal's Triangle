Base case: when numRows == 0, return the empty list.

Bottom up recursion: the answer at the current level is based on the answer from previous level, so we build up the answer from level 0 (numRows = 0). 
We first have a list of 1s, which has length numRows. 
Then modify the current level answer from the second element in the list to the second to last. The for loop can include the corner case when numRows = 1. 
Last we append the current level answer to final result and return it.

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        if numRows == 0:
            return []
        prev = self.generate(numRows-1)
        ans = [1]*numRows
        for i in range(1, numRows-1):
            ans[i] = prev[-1][i-1]+prev[-1][i]
        return prev + [ans]

